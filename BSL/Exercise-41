;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname Exercise-41) (read-case-sensitive #t) (teachpacks ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp")) #f)))
; Global constants
(define WIDTH-OF-WORLD 300)                 ; the horizontal length of the world
(define HEIGHT-OF-WORLD 50)                ; the vertical length of the world
(define WHEEL-RADIUS 7)                    ; the radius of the car wheel
(define WHEEL-DISTANCE (* 2.5 WHEEL-RADIUS)); distance between the wheels
(define WHEEL                               ; image of car wheel
  (circle WHEEL-RADIUS "solid" "black"))
(define SPACE                               ; image of the space between the wheels
  (rectangle WHEEL-DISTANCE (* 0.1 WHEEL-RADIUS) "solid" "white"))
(define BOTH-WHEELS                         ; image of both wheels and space between
  (beside WHEEL SPACE WHEEL))
(define CHASSIS                             ; car-body (contains the area for overlaying wheels)
  (above
   (rectangle (* 8 WHEEL-RADIUS) (* 2 WHEEL-RADIUS) "solid" "grey")
   (rectangle (* 8 WHEEL-RADIUS) (* 1 WHEEL-RADIUS) "solid" "white")))
(define ROOF                                ; car-roof
  (rectangle (* 4 WHEEL-RADIUS) WHEEL-RADIUS "solid" "grey"))
(define CAR                                 ; image of car composed of roof, chassis and both wheels
  (overlay/align "middle" "bottom" BOTH-WHEELS (above ROOF CHASSIS)))
(define TREE-RADIUS (* 2 WHEEL-RADIUS))     ; canopy radius
(define TREE                                ; tree made out of rectangle and circle
  (underlay/xy (circle TREE-RADIUS "solid" "green")
               (sub1 TREE-RADIUS) (* 0.75 (* 2 TREE-RADIUS))
               (rectangle (/ TREE-RADIUS 5) (* 2 TREE-RADIUS)  "solid" "brown")))
(define BACKGROUND                          ; background for the car
  (place-image TREE
               (* 0.25 WIDTH-OF-WORLD)
               (- HEIGHT-OF-WORLD (/ (image-height TREE) 2))
               (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD)))
(define CAR-WIDTH
  (image-width CAR))
(define CAR-HEIGHT
  (image-height CAR))
(define Y-CAR                               ; fixed Y-axis of the car
  (- HEIGHT-OF-WORLD (+ (/ CAR-HEIGHT 2) 1)))   
(define X-CAR-END                           ; X-axis value for final WorldState of car
  (- WIDTH-OF-WORLD (/ (image-width CAR) 2)))


; Functions
; WorldState -> Image
; places the image of the car x pixels from
; the left margin of the BACKGROUND image
(define (render x)
  (place-image CAR x Y-CAR BACKGROUND))
; WorldState -> WorldState
; adds 3 to x to move the car right
(define (tock x)
  (+ x 3))
; WorldState -> Boolean
; returns true when the final WorldState is reached
(define (end? x-axis)
  (>= x-axis X-CAR-END))
; WorldState: data that represents the state of the world (ws)
; A WorldState is a Number.
; interpretation: the number of pixels between the
; left border and the car
(define (main ws)
  (big-bang ws
    [to-draw render]
    [on-tick tock]
    [stop-when end?]))

;tests
(check-expect (render 50) (place-image CAR 50 Y-CAR BACKGROUND))
(check-expect (render 100) (place-image CAR 100 Y-CAR BACKGROUND))
(check-expect (render 150) (place-image CAR 150 Y-CAR BACKGROUND))
(check-expect (render 200) (place-image CAR 200 Y-CAR BACKGROUND))

(check-expect (tock 3) 6)
(check-expect (end? 100) #false)
(check-expect (end? X-CAR-END) #true)

(main 20)